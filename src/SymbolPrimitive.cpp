/*
 * Port of AutoREALM from Delphi/Object Pascal to wxWidgets/C++
 * Used in rpgs and hobbyist GIS applications for mapmaking
 * Copyright (C) 2004 Michael J. Pedersen <m.pedersen@icelus.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
/**
 * @file 
 */

#include "SymbolPrimitive.h"

static wxString className=wxT("SymbolPrimitive");

/**
 * Constructor
 *
 * @todo Complete the implementation
 */
SymbolPrimitive::SymbolPrimitive() {
    wxLogTrace(className, wxT("Entering SymbolPrimitive"));
    wxLogTrace(className, wxT("Exiting SymbolPrimitive"));
}

/**
 * Copy constructor
 *
 * @todo Complete the implementation
 */
SymbolPrimitive::SymbolPrimitive(const ViewPoint& view, coord ix, coord iy, wxString symbol, int isize, wxColour outlinecolor) {
    wxLogTrace(className, wxT("Entering SymbolPrimitive"));
    wxLogTrace(className, wxT("Exiting SymbolPrimitive"));
}

/**
 * Copy constructor
 *
 * @todo Complete the implementation
 */
SymbolPrimitive::SymbolPrimitive(const ViewPoint& view, coord ix, coord iy, wxString symbol, wxFont ifont, wxColour outlinecolor) {
    wxLogTrace(className, wxT("Entering SymbolPrimitive"));
    wxLogTrace(className, wxT("Exiting SymbolPrimitive"));
}

/**
 * Creates a copy of the object
 *
 * @return The copy
 *
 * @todo Complete the implementation
 */
DrawPrimitive* SymbolPrimitive::Copy() {
    wxLogTrace(className, wxT("Entering DrawPrimitive SymbolPrimitive::Copy"));
    wxLogTrace(className, wxT("Exiting DrawPrimitive SymbolPrimitive::Copy"));
}

/**
 * Makes an aliased copy from this object's Base object,
 * without copying anything specific to this one (like
 * its position).
 *
 * @param AliasOnly Creates an alias without copying the whole object.
 * 
 * @return Copy of the object
 *
 * @todo Complete the implementation
 */
void SymbolPrimitive::CopyFromBase(bool AliasOnly) {
    wxLogTrace(className, wxT("Entering void SymbolPrimitive::CopyFromBase"));
    wxLogTrace(className, wxT("Exiting void SymbolPrimitive::CopyFromBase"));
}

/**
 * Clears the object
 *
 * @param deallocate Frees the object and any resources it has allocated
 *
 * @todo Complete the implementation
 */
void SymbolPrimitive::ClearThis(bool deallocate) {
    wxLogTrace(className, wxT("Entering void SymbolPrimitive::ClearThis"));
    wxLogTrace(className, wxT("Exiting void SymbolPrimitive::ClearThis"));
}

/**
 * Converts an object into its composite parts (fractal gets turned into
 * polyline, text turned into polycurves, etc.) using the current view
 * as the resolution for the decompose.
 *
 * @param view View used for the decompose operation
 * @param NewChain New objects generated by the decompose
 * @param testinside Used during text/symbol decompose to make sure that
 *        internal "hollow" polygons are given special treatment.
 *
 * @return True if the object was decomposed
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::Decompose(const ViewPoint& view, DrawPrimitive& NewChain, bool testinside) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::Decompose"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::Decompose"));
}

/**
 * Computes the size (in coordinates) of the text from the number
 * of points (text size).
 *
 * @param view Viewpoint that should be used
 *
 * @todo Complete the implementation
 */
void SymbolPrimitive::ComputeSize(const ViewPoint& view) {
    wxLogTrace(className, wxT("Entering void SymbolPrimitive::ComputeSize"));
    wxLogTrace(className, wxT("Exiting void SymbolPrimitive::ComputeSize"));
}

/**
 * Sets font size as appropriate for the view with the current font
 * attributes (bold, size, etc.)
 *
 * @param view Viewpoint that should be used
 * @param sx  Beginning x point of the text (altered by drawing formatflags)
 * @param sy  Beginning y point of the text (altered by drawing formatflags)
 * @param formatflags Use DrawText flags (DT_CENTER, DT_RIGHT, and DT_VCENTER
 *        are recognized) to alter position of text.
 *
 * @return True if font was prepared.
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::PrepareFont(const ViewPoint& view, int& sx, int& sy, int formatflags) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::PrepareFont"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::PrepareFont"));
}

/**
 * Moves a single point inside an object; used in handle drag operations
 *
 * @param view Viewpoint used to manipulate the object
 * @param mode Either hmAll to move all handles or hmOne to move the first handle
 * @param origx X Origin of the handle drag operation (within one screen handle's number of pixels in this view)
 * @param origy Y Origin of the handle drag operation (within one screen handle's number of pixels in this view)
 * @param dx Delta x coordinate to be added to handle point
 * @param dy Delta y coordinate to be added to handle point
 * 
 * @return True if the handle was moved
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::MoveHandle(const ViewPoint& view, HandleMode& mode, coord origx, coord origy, coord dx, coord dy) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::MoveHandle"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::MoveHandle"));
}

/**
 * Updates the object's internal Extent, the surrounding rectangle
 * that is used for quick in/out calculations.
 *
 * @todo Complete the implementation
 */
void SymbolPrimitive::ComputeExtent() {
    wxLogTrace(className, wxT("Entering void SymbolPrimitive::ComputeExtent"));
    wxLogTrace(className, wxT("Exiting void SymbolPrimitive::ComputeExtent"));
}

/**
 * Draws the object
 *
 * @param view The viewpoint that the object is drawn with.
 * 
 * @todo Complete the implementation
 */
void SymbolPrimitive::Draw(ViewPoint view) {
    wxLogTrace(className, wxT("Entering void SymbolPrimitive::Draw"));
    wxLogTrace(className, wxT("Exiting void SymbolPrimitive::Draw"));
}

/**
 * Multiplies the object by the given matrix to perform transform operations
 *
 * @param mat Matrix to be multiplied.
 *
 * @return True if the matrix was applied
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::ApplyMatrix(Matrix3& mat) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::ApplyMatrix"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::ApplyMatrix"));
}

/**
 * Moves an object.
 *
 * @param dx Delta x coordinate to be added to entire object
 * @param dy Delta y coordinate to be added to entire object
 * 
 * @todo Complete the implementation
 */
void SymbolPrimitive::Move(coord dx, coord dy) {
    wxLogTrace(className, wxT("Entering void SymbolPrimitive::Move"));
    wxLogTrace(className, wxT("Exiting void SymbolPrimitive::Move"));
}

/**
 * Gets the object's text attributes (font, bold, size, etc.)
 *
 * @return Object's current text attributes
 *
 * @todo Complete the implementation
 */
TextAttrib SymbolPrimitive::GetTextAttrib() {
    wxLogTrace(className, wxT("Entering TextAttrib SymbolPrimitive::GetTextAttrib"));
    wxLogTrace(className, wxT("Exiting TextAttrib SymbolPrimitive::GetTextAttrib"));
}

/**
 * Sets the object's text attributes (font, bold, size, etc.)
 *
 * @param view Viewpoint to use for the text
 * @param attrib New attributes for the text
 *
 * @return True if the text attributes were set
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::SetTextAttrib(const ViewPoint& view, const TextAttrib& attrib) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::SetTextAttrib"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::SetTextAttrib"));
}

arRealRect SymbolPrimitive::RotatedBox(coord w, coord h, int formatflags) {
    wxLogTrace(className, wxT("Entering arRealRect SymbolPrimitive::RotatedBox"));
    wxLogTrace(className, wxT("Exiting arRealRect SymbolPrimitive::RotatedBox"));
}

/**
 * Sets this object as selected if the click was a mouse select by the user.
 * Closed objects require a click inside the object; segmented lines require
 * a click within the specified distance of the line.
 *
 * @param within Distance that click can be away from line and still register
 * @param p Click test point
 * 
 * @return true if object is selected as result of click
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::SelectClick(const double within, arRealPoint p) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::SelectClick"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::SelectClick"));
}

/**
 * Returns identifier not for this object, but for this type of object.
 *
 * @return Single character identifier
 *
 * @todo Complete the implementation
 */
wxString SymbolPrimitive::GetId() {
    wxLogTrace(className, wxT("Entering wxString SymbolPrimitive::GetId"));
    wxLogTrace(className, wxT("Exiting wxString SymbolPrimitive::GetId"));
}

/**
 * Returns true if this object is similar (i.e. could be considered
 * as an alias object) to the passed object.  IsSimilarTo doesn't
 * require exact matching, since there is a small delta difference
 * that is allowed.
 *
 * @param D Object to compare to.
 *
 * @return True if the objects are similar
 *
 * @todo Complete the implementation
 */
bool SymbolPrimitive::IsSimilarTo(DrawPrimitive D) {
    wxLogTrace(className, wxT("Entering bool SymbolPrimitive::IsSimilarTo"));
    wxLogTrace(className, wxT("Exiting bool SymbolPrimitive::IsSimilarTo"));
}


void SymbolPrimitive::DoRead(wxFileInputStream& ins, int version, bool Full, bool UseAliasInfo) {
    wxLogTrace(className, wxT("Entering DoRead"));
    wxLogTrace(className, wxT("Exiting DoRead"));
}

void SymbolPrimitive::ReadFromDOMElement(wxXmlNode e, int version) {
    wxLogTrace(className, wxT("Entering ReadFromDOMElement"));
    wxLogTrace(className, wxT("Exiting ReadFromDOMElement"));
}

wxXmlNode SymbolPrimitive::GetAsDOMElement(wxXmlDocument D, bool undo) {
    wxLogTrace(className, wxT("Entering GetAsDOMElement"));
    wxLogTrace(className, wxT("Exiting GetAsDOMElement"));
}
