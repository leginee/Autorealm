/*
 * Port of AutoREALM from Delphi/Object Pascal to wxWidgets/C++
 * Used in rpgs and hobbyist GIS applications for mapmaking
 * Copyright (C) 2004 Michael J. Pedersen <m.pedersen@icelus.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
/**
 * @file 
 */

#include "GroupPrimitive.h"

static wxString className=wxT("GroupPrimitive");

/**
 * Constructor
 *
 * @todo Complete the implementation
 */
GroupPrimitive::GroupPrimitive() {
    wxLogTrace(className, wxT("Entering GroupPrimitive"));
    wxLogTrace(className, wxT("Exiting GroupPrimitive"));
}

/**
 * Copy constructor
 *
 * @todo Complete the implementation
 */
GroupPrimitive::GroupPrimitive(DrawPrimitive starting_head) {
    wxLogTrace(className, wxT("Entering GroupPrimitive"));
    wxLogTrace(className, wxT("Exiting GroupPrimitive"));
}

/**
 * Creates a copy of the object
 *
 * @return The copy
 *
 * @todo Complete the implementation
 */
DrawPrimitive* GroupPrimitive::Copy() {
    wxLogTrace(className, wxT("Entering Copy"));
    wxLogTrace(className, wxT("Exiting Copy"));
}

/**
 * Makes an aliased copy from this object's Base object,
 * without copying anything specific to this one (like
 * its position).
 *
 * @param AliasOnly Creates an alias without copying the whole object.
 * 
 * @return Copy of the object
 *
 * @todo Complete the implementation
 */
void GroupPrimitive::CopyFromBase(bool AliasOnly) {
    wxLogTrace(className, wxT("Entering CopyFromBase"));
    wxLogTrace(className, wxT("Exiting CopyFromBase"));
}

/**
 * Sets the owning map or symbol collection for an object.
 *
 * @param M The parent map
 *
 * @todo Complete the implementation
 */
void GroupPrimitive::SetMap(wxObject M) {
    wxLogTrace(className, wxT("Entering SetMap"));
    wxLogTrace(className, wxT("Exiting SetMap"));
}

/**
 * This routine checks a DrawPrimitive and finds out whether it is a unique
 * object or is in fact a copy of something that already exists.  If the object
 * is unique, it is added to the base object list, and if it is a copy then it
 * is turned into an alias.  Generally this can be a time-consuming process,
 * since it calls IsSimilarTo() for each object it finds in the base list, and
 * should only be used at certain times (loading a binary map file, adding
 * new objects, etc.).  Since XML files are designed to preserve base/alias
 * information, this doesn't need to be called when they are loaded, which
 * makes loading XML files very fast!  The main place where this routine is
 * used is when binary maps are loaded and objects are made into base and alias
 * objects.  It makes loading binary maps take longer but once they're converted
 * to XML maps the pain is gone :)
 *
 * @param DoChain If true, do this object and all linked to it
 *
 * @todo Complete the implementation
 */
void GroupPrimitive::AddToBaseOrCopies(bool DoChain) {
    wxLogTrace(className, wxT("Entering AddToBaseOrCopies"));
    wxLogTrace(className, wxT("Exiting AddToBaseOrCopies"));
}

/**
 * Clears the object
 *
 * @param Deallocate Frees the object and any resources it has allocated
 *
 * @todo Complete the implementation
 */
void GroupPrimitive::ClearThis(bool Deallocate) {
    wxLogTrace(className, wxT("Entering ClearThis"));
    wxLogTrace(className, wxT("Exiting ClearThis"));
}

/**
 * Converts an object into its composite parts (fractal gets turned into
 * polyline, text turned into polycurves, etc.) using the current view
 * as the resolution for the decompose.
 *
 * @param view View used for the decompose operation
 * @param NewChain New objects generated by the decompose
 * @param testinside Used during text/symbol decompose to make sure that
 *        internal "hollow" polygons are given special treatment.
 *
 * @return True if the object was decomposed
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::Decompose(const ViewPoint& view, DrawPrimitive& NewChain, bool testinside) {
    wxLogTrace(className, wxT("Entering Decompose"));
    wxLogTrace(className, wxT("Exiting Decompose"));
}

/**
 * Sets the new head of the group list.
 *
 * @param newHead Pointer to first object in list of object to start
 *        the new group.
 *
 * @return Returns true if successful
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetHead(DrawPrimitive newHead) {
    wxLogTrace(className, wxT("Entering SetHead"));
    wxLogTrace(className, wxT("Exiting SetHead"));
}

/**
 * Returns the first object in the group.
 *
 * @return the first object in the group.
 *
 * @todo Complete the implementation
 */
DrawPrimitive GroupPrimitive::GetHead() {
    wxLogTrace(className, wxT("Entering GetHead"));
    wxLogTrace(className, wxT("Exiting GetHead"));
}

/**
 * Draws the object
 *
 * @param view The viewpoint that the object is drawn with.
 * 
 * @todo Complete the implementation
 */
void GroupPrimitive::Draw(ViewPoint view) {
    wxLogTrace(className, wxT("Entering Draw"));
    wxLogTrace(className, wxT("Exiting Draw"));
}

/**
 * Multiplies the object by the given matrix to perform transform operations
 *
 * @param mat Matrix to be multiplied.
 *
 * @return True if the matrix was applied
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::ApplyMatrix(Matrix3& mat) {
    wxLogTrace(className, wxT("Entering ApplyMatrix"));
    wxLogTrace(className, wxT("Exiting ApplyMatrix"));
}

/**
 * Moves a single point inside an object; used in handle drag operations
 *
 * @param view Viewpoint used to manipulate the object
 * @param mode Either hmAll to move all handles or hmOne to move the first handle
 * @param origx X Origin of the handle drag operation (within one screen handle's number of pixels in this view)
 * @param origy Y Origin of the handle drag operation (within one screen handle's number of pixels in this view)
 * @param dx Delta x coordinate to be added to handle point
 * @param dy Delta y coordinate to be added to handle point
 * 
 * @return True if the handle was moved
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::MoveHandle(const ViewPoint& view, HandleMode& mode, coord origx, coord origy, coord dx, coord dy) {
    wxLogTrace(className, wxT("Entering MoveHandle"));
    wxLogTrace(className, wxT("Exiting MoveHandle"));
}

/**
 * Moves an object.
 *
 * @param dx Delta x coordinate to be added to entire object
 * @param dy Delta y coordinate to be added to entire object
 * 
 * @todo Complete the implementation
 */
void GroupPrimitive::Move(coord dx, coord dy) {
    wxLogTrace(className, wxT("Entering Move"));
    wxLogTrace(className, wxT("Exiting Move"));
}

/**
 * Sets the style (line style and line endpoint styles) of the object
 *
 * @param new_style New style for object.
 *
 * @return True if the style was set
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetStyle(StyleAttrib new_style) {
    wxLogTrace(className, wxT("Entering SetStyle"));
    wxLogTrace(className, wxT("Exiting SetStyle"));
}

/**
 * Gets the object's style (line style and line endpoint styles)
 *
 * @return The object's style
 *
 * @todo Complete the implementation
 */
StyleAttrib GroupPrimitive::GetStyle() {
    wxLogTrace(className, wxT("Entering GetStyle"));
    wxLogTrace(className, wxT("Exiting GetStyle"));
}

/**
 * Sets the object's fractal seed
 *
 * @param new_seed The new fractal seed
 *
 * @return True if the seed was set
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetSeed(int new_seed) {
    wxLogTrace(className, wxT("Entering SetSeed"));
    wxLogTrace(className, wxT("Exiting SetSeed"));
}

/**
 * Gets the object's fractal seed
 *
 * @return The object's fractal seed
 *
 * @todo Complete the implementation
 */
int GroupPrimitive::GetSeed() {
    wxLogTrace(className, wxT("Entering GetSeed"));
    wxLogTrace(className, wxT("Exiting GetSeed"));
}

/**
 * Sets the object's roughness
 *
 * @param rough The object's roughness
 *
 * @return True if the roughness was set
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetRoughness(int rough) {
    wxLogTrace(className, wxT("Entering SetRoughness"));
    wxLogTrace(className, wxT("Exiting SetRoughness"));
}

/**
 * Returns the object's roughness.
 *
 * @return The object's roughness
 *
 * @todo Complete the implementation
 */
int GroupPrimitive::GetRoughness() {
    wxLogTrace(className, wxT("Entering GetRoughness"));
    wxLogTrace(className, wxT("Exiting GetRoughness"));
}

/**
 * Sets the color of the object.
 *
 * @param color New color
 *
 * @return Returns true if successful
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetColor(wxColour color) {
    wxLogTrace(className, wxT("Entering SetColor"));
    wxLogTrace(className, wxT("Exiting SetColor"));
}

/**
 * Gets the color of the object.
 *
 * @return The color of the object
 *
 * @todo Complete the implementation
 */
wxColour GroupPrimitive::GetColor() {
    wxLogTrace(className, wxT("Entering GetColor"));
    wxLogTrace(className, wxT("Exiting GetColor"));
}

/**
 * Sets the overlay of the object.
 *
 * @param overlay New object overlay
 *
 * @return Returns true if successful
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetOverlay(unsigned short overlay) {
/**
 * Sets the overlay of the object.
 *
 * @param overlay New object overlay
 *
 * @return Returns true if successful
 *
 * @todo Complete the implementation
 */
    wxLogTrace(className, wxT("Entering SetOverlay"));
/**
 * Sets the overlay of the object.
 *
 * @param overlay New object overlay
 *
 * @return Returns true if successful
 *
 * @todo Complete the implementation
 */
    wxLogTrace(className, wxT("Exiting SetOverlay"));
}

/**
 * Gets the overlay that the object belongs to
 *
 * @return The object's overlay
 *
 * @todo Complete the implementation
 */
int GroupPrimitive::GetOverlay() {
    wxLogTrace(className, wxT("Entering GetOverlay"));
    wxLogTrace(className, wxT("Exiting GetOverlay"));
}

/**
 * Sets the object's text attributes (font, bold, size, etc.)
 *
 * @param view Viewpoint to use for the text
 * @param text New attributes for the text
 *
 * @return True if the text attributes were set
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetTextAttrib(const ViewPoint& view, const TextAttrib& text) {
    wxLogTrace(className, wxT("Entering SetTextAttrib"));
    wxLogTrace(className, wxT("Exiting SetTextAttrib"));
}

/**
 * Gets the object's text attributes (font, bold, size, etc.)
 *
 * @return Object's current text attributes
 *
 * @todo Complete the implementation
 */
TextAttrib GroupPrimitive::GetTextAttrib() {
    wxLogTrace(className, wxT("Entering GetTextAttrib"));
    wxLogTrace(className, wxT("Exiting GetTextAttrib"));
}

/**
 * Sets a closed object's fill color.
 *
 * @param color Fill color to set
 * 
 * @return True if the object was set
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetFillColor(wxColour color) {
    wxLogTrace(className, wxT("Entering SetFillColor"));
    wxLogTrace(className, wxT("Exiting SetFillColor"));
}

/**
 * Returns an object's fill color
 *
 * @return Fill color of the object
 *
 * @todo Complete the implementation
 */
wxColour GroupPrimitive::GetFillColor() {
    wxLogTrace(className, wxT("Entering GetFillColor"));
    wxLogTrace(className, wxT("Exiting GetFillColor"));
}

/**
 * Updates the object's internal Extent, the surrounding rectangle
 * that is used for quick in/out calculations.
 *
 * @todo Complete the implementation
 */
void GroupPrimitive::ComputeExtent() {
    wxLogTrace(className, wxT("Entering ComputeExtent"));
    wxLogTrace(className, wxT("Exiting ComputeExtent"));
}

/**
 * Sets this object as selected if the click was a mouse select by the user.
 * Closed objects require a click inside the object; segmented lines require
 * a click within the specified distance of the line.
 *
 * @param within Distance that click can be away from line and still register
 * @param p Click test point
 * 
 * @return true if object is selected as result of click
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SelectClick(const double within, arRealPoint p) {
    wxLogTrace(className, wxT("Entering SelectClick"));
    wxLogTrace(className, wxT("Exiting SelectClick"));
}

/**
 * Reverses the points within an object (used to alternate the line
 * style direction and line endpoint styles).
 *
 * @todo Complete the implementation
 */
void GroupPrimitive::Reverse() {
    wxLogTrace(className, wxT("Entering Reverse"));
    wxLogTrace(className, wxT("Exiting Reverse"));
}

/**
 * Sets the object's fractal state
 *
 * @param state Fractal seed and roughness
 *
 * @return True if the object accepted the fractal state set
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::SetFractal(FractalState state) {
    wxLogTrace(className, wxT("Entering SetFractal"));
    wxLogTrace(className, wxT("Exiting SetFractal"));
}

/**
 * Returns identifier not for this object, but for this type of object.
 *
 * @return Single character identifier
 *
 * @todo Complete the implementation
 */
wxString GroupPrimitive::GetId() {
    wxLogTrace(className, wxT("Entering GetId"));
    wxLogTrace(className, wxT("Exiting GetId"));
}

/**
 * Returns true if this object is similar (i.e. could be considered
 * as an alias object) to the passed object.  IsSimilarTo doesn't
 * require exact matching, since there is a small delta difference
 * that is allowed.
 *
 * @param D Object to compare to.
 *
 * @return True if the objects are similar
 *
 * @todo Complete the implementation
 */
bool GroupPrimitive::IsSimilarTo(DrawPrimitive D) {
    wxLogTrace(className, wxT("Entering IsSimilarTo"));
    wxLogTrace(className, wxT("Exiting IsSimilarTo"));
}


void GroupPrimitive::DoRead(wxFileInputStream& ins, int version, bool Full, bool UseAliasInfo) {
    wxLogTrace(className, wxT("Entering DoRead"));
    wxLogTrace(className, wxT("Exiting DoRead"));
}

void GroupPrimitive::ReadFromDOMElement(wxXmlNode e, int version) {
    wxLogTrace(className, wxT("Entering ReadFromDOMElement"));
    wxLogTrace(className, wxT("Exiting ReadFromDOMElement"));
}

wxXmlNode GroupPrimitive::GetAsDOMElement(wxXmlDocument D, bool undo) {
    wxLogTrace(className, wxT("Entering GetAsDOMElement"));
    wxLogTrace(className, wxT("Exiting GetAsDOMElement"));
}
